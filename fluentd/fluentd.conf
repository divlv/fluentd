<system>
  log_level debug
  suppress_repeated_stacktrace true
</system>

<source>
  @type forward
  # If "tag" used here - if will overwrite GrayLog's "fluentd_tag" in GrayLog UI
  # Generally, fluentd_tag= --log-opt tag="mytag" - from started container.
  #tag sometag
</source>


########## mycontainer1 #############################################################

<filter mycontainer1>
  @type concat
  key log
  stream_identity_key container_id
  multiline_start_regexp /\[[\d]{2}m:/
  flush_interval 3
  # After timeout (3s?) all the buffered message will be flushed forward to Output
  timeout_label @NORMAL1
</filter>

<match mycontainer1>
  @type relabel
  @label @NORMAL1
</match>


<label @NORMAL1>
<match mycontainer1>
  @type gelf
  host mygraylog.example.com
  port 12250
  protocol udp
  <buffer>
    flush_interval 3s
  </buffer>
</match>
</label>

<match mycontainer1>
  @type gelf
  host mygraylog.example.com
  port 12250
  protocol udp
  <buffer>
    flush_interval 3s
  </buffer>
</match>


########## mycontainer2 #############################################################

<filter mycontainer2>
  @type concat
  key log
  stream_identity_key container_id
  multiline_start_regexp /\[[\d]{2}m:/
  flush_interval 3
  # After timeout (3s?) all the buffered message will be flushed forward to Output
  timeout_label @NORMAL2
</filter>

<match mycontainer2>
  @type relabel
  @label @NORMAL2
</match>

<label @NORMAL2>
<match mycontainer2>
  @type gelf
  host mygraylog.example.com
  port 12250
  protocol udp
  <buffer>
    flush_interval 3s
  </buffer>
</match>
</label>

<match mycontainer2>
  @type gelf
  host mygraylog.example.com
  port 12250
  protocol udp
  <buffer>
    flush_interval 3s
  </buffer>
</match>


########## mycontainer3 #############################################################

<filter mycontainer3>
  @type record_transformer
  <record>
    host somemyhost
    message "Full log message"
  </record>
</filter>

<match mycontainer3>
  @type gelf
  host mygraylog.example.com
  port 12250
  protocol udp
  <buffer>
    flush_interval 3s
  </buffer>
</match>



########## mycontainer4 #############################################################

# Extract special browser-based logs (Javascript generated)
<filter mycontainer4>
  @type grep
  <regexp>
    key log
    pattern /Filter[^\s]+SomeMyLogSuffix/
  </regexp>
</filter>

# Cleanup all other data (from the beginning of the log line). Leave only JSON-ed log record from browser
<filter mycontainer4>
  @type record_transformer
  enable_ruby
  <record>
    log ${record["log"].gsub(/^.+LogError Error /, '')}
  </record>
</filter>

# Parse inner JSON into separate fields
<filter mycontainer4>
  @type parser
  key_name log
  format json
  reserve_data true
</filter>

# Cleanup unparsed inner JSON and use "log" field as a flag for this particular log source - from browser.
<filter mycontainer4>
  @type record_transformer
  <record>
    log browser
    host somemyhost
  </record>
</filter>

# Send the data to GrayLog
<match mycontainer4>
  @type gelf
  host mygraylog.example.com
  port 12250
  protocol udp
  <buffer>
    flush_interval 3s
  </buffer>
</match>

# Enable the following section if debug is needed, - we'll have console ouput of FluentD work
#<match mycontainer4>
#  @type stdout
#</match>
